{"/home/travis/build/npmtest/node-npmtest-n/test.js":"/* istanbul instrument in package npmtest_n */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-n/lib.npmtest_n.js":"/* istanbul instrument in package npmtest_n */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_n = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_n = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-n/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-n && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_n */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_n\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_n.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_n.rollup.js'] =\n            local.assetsDict['/assets.npmtest_n.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_n.__dirname + '/lib.npmtest_n.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-n/node_modules/n/bin/n":"#!/usr/bin/env bash\n\n#\n# Setup.\n#\n\nVERSION=\"2.1.7\"\nUP=$'\\033[A'\nDOWN=$'\\033[B'\nN_PREFIX=${N_PREFIX-/usr/local}\nBASE_VERSIONS_DIR=$N_PREFIX/n/versions\n\n#\n# Log <type> <msg>\n#\n\nlog() {\n  printf \"  \\033[36m%10s\\033[0m : \\e[2m%s\\e[22m\\033[0m\\n\" $1 $2\n}\n\n#\n# Exit with the given <msg ...>\n#\n\nabort() {\n  printf \"\\n  \\033[31mError: $@\\033[0m\\n\\n\" && exit 1\n}\n\n#\n# All Bin(node/io) configurations\n#\n\nBINS=(\"node\"\n      \"io\")\nMIRROR=(${NODE_MIRROR-https://nodejs.org/dist/}\n        ${IO_MIRROR-https://iojs.org/dist/})\nBIN_NAME=(\"node\"\n          \"iojs\")\nVERSIONS_DIR=($BASE_VERSIONS_DIR/node\n              $BASE_VERSIONS_DIR/io)\n\nif [ -n \"$PROJECT_NAME\" ]; then\n  BINS+=($PROJECT_NAME)\n  BIN_NAME+=($PROJECT_NAME)\n  if [ -z \"$PROJECT_URL\" ]; then\n    abort \"Must specify PROJECT_URL when supplying PROJECT_NAME\"\n  fi\n  MIRROR+=(${PROJECT_URL})\n  VERSIONS_DIR+=($BASE_VERSIONS_DIR/$PROJECT_NAME)\nfi\n\n#\n# Ensure we have curl or wget support.\n#\n\nCURL_PARAMS=( \"-L\"\n              \"-#\")\n\nWGET_PARAMS=( \"--no-check-certificate\"\n              \"-q\"\n              \"-O-\")\n\nif [ -n \"$HTTP_USER\" ];then\n  if [ -z \"$HTTP_PASSWORD\" ]; then\n    abort \"Must specify HTTP_PASSWORD when supplying HTTP_USER\"\n  fi\n  CURL_PARAMS+=(\"-u $HTTP_USER:$HTTP_PASSWORD\")\n  WGET_PARAMS+=(\"--http-password=$HTTP_PASSWORD\"\n                \"--http-user=$HTTP_USER\")\nelif [ -n \"$HTTP_PASSWORD\" ]; then\n  abort \"Must specify HTTP_USER when supplying HTTP_PASSWORD\"\nfi\n\nGET=\n\n# wget support\ncommand -v wget > /dev/null && GET=\"wget ${WGET_PARAMS[@]}\"\n\ncommand -v curl > /dev/null && GET=\"curl ${CURL_PARAMS[@]}\" && QUIET=false\n\ntest -z \"$GET\" && abort \"curl or wget required\"\n\n#\n# State\n#\n\nDEFAULT=0\nQUIET=true\nACTIVATE=true\nARCH=\n\n#\n# set_default <BIN_NAME>\n#\n\n\nset_default() {\n  for (( i=0 ; i<${#BINS[@]} ; i++ )); do\n    if test ${BINS[$i]} = $1; then\n      DEFAULT=$i\n    fi\n  done\n}\n\nfor dir in ${VERSIONS_DIR[@]}; do\n  test -d $dir || mkdir -p $dir\ndone\n\n#\n# set_arch <arch> to override $(uname -a)\n#\n\nset_arch() {\n  if test ! -z $1; then\n    ARCH=$1\n  else\n    abort \"missing -a|--arch value\"\n  fi\n}\n\n#\n# Functions used when showing versions installed\n#\n\nenter_fullscreen() {\n  tput smcup\n  stty -echo\n}\n\nleave_fullscreen() {\n  tput rmcup\n  stty echo\n}\n\nhandle_sigint() {\n  leave_fullscreen\n  S=\"$?\"\n  kill 0\n  exit $S\n}\n\nhandle_sigtstp() {\n  leave_fullscreen\n  kill -s SIGSTOP $$\n}\n\n#\n# Output usage information.\n#\n\ndisplay_help() {\n  cat <<-EOF\n\n  Usage: n [options/env] [COMMAND] [args]\n\n  Environments:\n    n [COMMAND] [args]            Uses default env (node)\n    n io [COMMAND]                Sets env as io\n    n project [COMMAND]           Uses custom env-variables to use non-official sources\n\n  Commands:\n\n    n                              Output versions installed\n    n latest                       Install or activate the latest node release\n    n -a x86 latest                As above but force 32 bit architecture\n    n stable                       Install or activate the latest stable node release\n    n lts                          Install or activate the latest LTS node release\n    n <version>                    Install node <version>\n    n use <version> [args ...]     Execute node <version> with [args ...]\n    n bin <version>                Output bin path for <version>\n    n rm <version ...>             Remove the given version(s)\n    n prune                        Remove all versions except the current version\n    n --latest                     Output the latest node version available\n    n --stable                     Output the latest stable node version available\n    n --lts                        Output the latest LTS node version available\n    n ls                           Output the versions of node available\n\n  (iojs):\n    n io latest                    Install or activate the latest iojs release\n    n io -a x86 latest             As above but force 32 bit architecture\n    n io <version>                 Install iojs <version>\n    n io use <version> [args ...]  Execute iojs <version> with [args ...]\n    n io bin <version>             Output bin path for <version>\n    n io rm <version ...>          Remove the given version(s)\n    n io --latest                  Output the latest iojs version available\n    n io ls                        Output the versions of iojs available\n\n  Options:\n\n    -V, --version   Output current version of n\n    -h, --help      Display help information\n    -q, --quiet     Disable curl output (if available)\n    -d, --download  Download only\n    -a, --arch      Override system architecture\n\n  Aliases:\n\n    which   bin\n    use     as\n    list    ls\n    -       rm\n\nEOF\n}\n\nerr_no_installed_print_help() {\n  printf \"\\n  \\033[31mError: no installed version\\033[0m\\n\"\n  display_help\n  exit 1\n}\n\n#\n# Hide cursor.\n#\n\nhide_cursor() {\n  printf \"\\e[?25l\"\n}\n\n#\n# Show cursor.\n#\n\nshow_cursor() {\n  printf \"\\e[?25h\"\n}\n\n#\n# Output version after selected.\n#\n\nnext_version_installed() {\n  list_versions_installed | grep $selected -A 1 | tail -n 1\n}\n\n#\n# Output version before selected.\n#\n\nprev_version_installed() {\n  list_versions_installed | grep $selected -B 1 | head -n 1\n}\n\n#\n# Output n version.\n#\n\ndisplay_n_version() {\n  echo $VERSION && exit 0\n}\n\n#\n# Check for installed version, and populate $active\n#\n\ncheck_current_version() {\n  command -v node &> /dev/null\n  if test $? -eq 0; then\n    local current=$(node --version)\n    if [ -n \"$PROJECT_VERSION_CHECK\" ]; then\n      current=$(node -p \"$PROJECT_VERSION_CHECK || process.exit(1)\" || node --version)\n    fi\n    current=${current#v}\n    for bin in ${BINS[@]}; do\n      if diff &> /dev/null \\\n        $BASE_VERSIONS_DIR/$bin/$current/bin/node \\\n        $(which node) ; then\n        active=$bin/$current\n      fi\n    done\n  fi\n}\n\n#\n# Check the operation is supported for io.\n#\n\ncheck_io_supported() {\n  test $DEFAULT -eq 1 && abort \"$1 not supported for io.js\"\n}\n\n#\n# Display sorted versions directories paths.\n#\n\nversions_paths() {\n  find $BASE_VERSIONS_DIR -maxdepth 2 -type d \\\n    | sed 's|'$BASE_VERSIONS_DIR'/||g' \\\n    | egrep \"/[0-9]+\\.[0-9]+\\.[0-9]+$\" \\\n    | sort -k 1,1 -k 2,2n -k 3,3n -t .\n}\n\n#\n# Display installed versions with <selected>\n#\n\ndisplay_versions_with_selected() {\n  selected=$1\n  echo\n  for version in $(versions_paths); do\n    if test \"$version\" = \"$selected\"; then\n      printf \"  \\033[36mο\\033[0m $version\\033[0m\\n\"\n    else\n      printf \"    \\e[2m$version\\e[22m\\n\"\n    fi\n  done\n  echo\n}\n\n#\n# List installed versions.\n#\n\nlist_versions_installed() {\n  for version in $(versions_paths); do\n    echo $version\n  done\n}\n\n#\n# Display current node --version and others installed.\n#\n\ndisplay_versions() {\n  enter_fullscreen\n  check_current_version\n  clear\n  display_versions_with_selected $active\n\n  trap handle_sigint INT\n  trap handle_sigtstp SIGTSTP\n\n  while true; do\n    read -n 3 c\n    case \"$c\" in\n      $UP)\n        clear\n        display_versions_with_selected $(prev_version_installed)\n        ;;\n      $DOWN)\n        clear\n        display_versions_with_selected $(next_version_installed)\n        ;;\n      *)\n        activate $selected\n        leave_fullscreen\n        exit\n        ;;\n    esac\n  done\n}\n\n#\n# Move up a line and erase.\n#\n\nerase_line() {\n  printf \"\\033[1A\\033[2K\"\n}\n\n#\n# Check if the HEAD response of <url> is 200.\n#\nis_ok() {\n  if command -v curl > /dev/null; then\n    $GET -Is $1 | head -n 1 | grep 200 > /dev/null\n  else\n    $GET -S --spider 2>&1 $1 | head -n 1 | grep 200 > /dev/null\n  fi\n}\n\n#\n# Check if the OSS(Object Storage Service) mirror is ok.\n#\nis_oss_ok() {\n  if command -v curl > /dev/null; then\n    if $GET -Is $1 | head -n 1 | grep 302 > /dev/null; then\n      is_oss_ok $GET -Is $1 | grep Location | awk -F ': ' '{print $2}'\n    else\n      $GET -Is $1 | head -n 1 | grep 200 > /dev/null\n    fi\n  else\n    if $GET -S --spider 2>&1 $1 | head -n 1 | grep 302 > /dev/null; then\n      is_oss_ok $GET -S --spider 2>&1 $1 | grep Location | awk -F ': ' '{print $2}'\n    else\n      $GET -S --spider 2>&1 $1 | head -n 1 | grep 200 > /dev/null\n    fi\n  fi\n}\n\n#\n# Determine tarball url for <version>\n#\n\ntarball_url() {\n  local version=$1\n  local uname=\"$(uname -a)\"\n  local arch=x86\n  local os=\n\n  # from nave(1)\n  case \"$uname\" in\n    Linux*) os=linux ;;\n    Darwin*) os=darwin ;;\n    SunOS*) os=sunos ;;\n  esac\n\n  case \"$uname\" in\n    *x86_64*) arch=x64 ;;\n    *armv6l*) arch=armv6l ;;\n    *armv7l*) arch=armv7l ;;\n  esac\n\n  if [ ${arch} = \"armv6l\" -a ${BIN_NAME[$DEFAULT]} = node ]; then\n    local semver=${version//./ }\n    local major=$(echo $semver | grep -o -E '[0-9]+' | head -1 | sed -e 's/^0\\+//')\n    local minor=$(echo $semver | awk '{print $2}' | grep -o -E '[0-9]+' | head -1 | sed -e 's/^0\\+//')\n    [[ $major -eq \"\" && $minor -lt 12 ]] && arch=arm-pi\n  fi\n\n  [ ! -z $ARCH ] && arch=$ARCH\n\n  echo \"${MIRROR[$DEFAULT]}v${version}/${BIN_NAME[$DEFAULT]}-v${version}-${os}-${arch}.tar.gz\"\n\n}\n\n#\n# Disable PaX mprotect for <binary>\n#\n\ndisable_pax_mprotect() {\n  test -z $1 && abort \"binary required\"\n  local binary=$1\n\n  # try to disable mprotect via XATTR_PAX header\n  local PAXCTL=$(PATH=\"/sbin:/usr/sbin:$PATH\" which paxctl-ng 2>&1)\n  local PAXCTL_ERROR=1\n  if [ -x \"$PAXCTL\" ]; then\n    $PAXCTL -l && $PAXCTL -m \"$binary\" >/dev/null 2>&1\n    PAXCTL_ERROR=\"$?\"\n  fi\n\n  # try to disable mprotect via PT_PAX header\n  if [ $PAXCTL_ERROR != 0 ]; then\n    PAXCTL=$(PATH=\"/sbin:/usr/sbin:$PATH\" which paxctl 2>&1)\n    if [ -x \"$PAXCTL\" ]; then\n      $PAXCTL -Cm \"$binary\" >/dev/null 2>&1\n    fi\n  fi\n}\n\n#\n# Activate <version>\n#\n\nactivate() {\n  local version=$1\n  check_current_version\n  if test \"$version\" != \"$active\"; then\n    local dir=$BASE_VERSIONS_DIR/$version\n    for subdir in bin lib include share; do\n      if test -L \"$N_PREFIX/$subdir\"; then\n        find \"$dir/$subdir\" -mindepth 1 -maxdepth 1 -exec cp -fR \"{}\" \"$N_PREFIX/$subdir\" \\;\n      else\n        cp -fR \"$dir/$subdir\" $N_PREFIX\n      fi\n    done\n    disable_pax_mprotect \"$N_PREFIX/bin/node\"\n  fi\n}\n\n#\n# Install latest version.\n#\n\ninstall_latest() {\n  install $(display_latest_version)\n}\n\n#\n# Install latest stable version.\n#\n\ninstall_stable() {\n  check_io_supported \"stable\"\n  install $(display_latest_stable_version)\n}\n\n#\n# Install latest LTS version.\n#\n\ninstall_lts() {\n  check_io_supported \"lts\"\n  install $(display_latest_lts_version)\n}\n\n#\n# Install <version>\n#\n\ninstall() {\n  local version=${1#v}\n\n  local dots=$(echo $version | sed 's/[^.]*//g')\n  if test ${#dots} -lt 2; then\n    version=$($GET 2> /dev/null ${MIRROR[DEFAULT]} \\\n      | egrep \"</a>\" \\\n      | egrep -o '[0-9]+\\.[0-9]+\\.[0-9]+' \\\n      | egrep -v '^0\\.[0-7]\\.' \\\n      | egrep -v '^0\\.8\\.[0-5]$' \\\n      | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \\\n      | egrep ^$version \\\n      | tail -n1)\n\n    test $version || abort \"invalid version ${1#v}\"\n  fi\n\n  local dir=${VERSIONS_DIR[$DEFAULT]}/$version\n\n  if test -d $dir; then\n    if [[ ! -e $dir/n.lock ]] ; then\n      if $ACTIVATE ; then\n        activate ${BINS[$DEFAULT]}/$version\n      fi\n      exit\n    fi\n  fi\n\n  echo\n  log install ${BINS[$DEFAULT]}-v$version\n\n  local url=$(tarball_url $version)\n  is_ok $url || is_oss_ok $url || abort \"invalid version $version\"\n\n  log mkdir $dir\n  mkdir -p $dir\n  if [ $? -ne 0 ] ; then\n    abort \"sudo required\"\n  else\n    touch $dir/n.lock\n  fi\n\n  cd $dir\n\n  log fetch $url\n  $GET $url | tar -zx --strip-components=1\n  [ $QUIET == false ] && erase_line\n  rm -f $dir/n.lock\n\n  disable_pax_mprotect bin/node\n\n  if $ACTIVATE ; then\n    activate ${BINS[$DEFAULT]}/$version\n    log installed $(node --version)\n  fi\n  echo\n}\n\n#\n# Set curl to quiet (silent) mode.\n#\n\nset_quiet() {\n  command -v curl > /dev/null && GET=\"$GET -s\" && QUIET=true\n}\n\n#\n# Remove <version ...>\n#\n\nremove_versions() {\n  test -z $1 && abort \"version(s) required\"\n  check_current_version\n  while test $# -ne 0; do\n    local version=${1#v}\n    [ \"${BINS[$DEFAULT]}/$version\" == \"$active\" ] && abort \"cannot remove currently active version ($active)\"\n    rm -rf ${VERSIONS_DIR[$DEFAULT]}/$version\n    shift\n  done\n}\n\n#\n# Prune non-active versions\n#\n\nprune_versions() {\n  check_current_version\n  for version in $(versions_paths); do\n    if [ $version != $active ]\n    then\n      echo $version\n      rm -rf ${BASE_VERSIONS_DIR[$DEFAULT]}/$version\n      shift\n    fi\n  done\n}\n\n#\n# Output bin path for <version>\n#\n\ndisplay_bin_path_for_version() {\n  test -z $1 && abort \"version required\"\n  local version=${1#v}\n\n  if [ \"$version\" = \"latest\" ]; then\n    version=$(display_latest_version)\n  fi\n\n  if [ \"$version\" = \"stable\" ]; then\n    version=$(display_latest_stable_version)\n  fi\n\n  if [ \"$version\" = \"lts\" ]; then\n    version=$(display_latest_lts_version)\n  fi\n\n  local bin=${VERSIONS_DIR[$DEFAULT]}/$version/bin/node\n  if test -f $bin; then\n    printf \"$bin \\n\"\n  else\n    abort \"$1 is not installed\"\n  fi\n}\n\n#\n# Execute the given <version> of node with [args ...]\n#\n\nexecute_with_version() {\n  test -z $1 && abort \"version required\"\n  local version=${1#v}\n\n  if [ \"$version\" = \"latest\" ]; then\n    version=$(display_latest_version)\n  fi\n\n  if [ \"$version\" = \"stable\" ]; then\n    version=$(display_latest_stable_version)\n  fi\n\n  if [ \"$version\" = \"lts\" ]; then\n    version=$(display_latest_lts_version)\n  fi\n\n  local bin=${VERSIONS_DIR[$DEFAULT]}/$version/bin/node\n\n  shift # remove version\n\n  if test -f $bin; then\n    $bin \"$@\"\n  else\n    abort \"$version is not installed\"\n  fi\n}\n\n#\n# Display the latest release version.\n#\n\ndisplay_latest_version() {\n  $GET 2> /dev/null ${MIRROR[$DEFAULT]} \\\n    | egrep \"</a>\" \\\n    | egrep -o '[0-9]+\\.[0-9]+\\.[0-9]+' \\\n    | egrep -v '^0\\.[0-7]\\.' \\\n    | egrep -v '^0\\.8\\.[0-5]$' \\\n    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \\\n    | tail -n1\n}\n\n#\n# Display the latest stable release version.\n#\n\ndisplay_latest_stable_version() {\n  check_io_supported \"--stable\"\n  $GET 2> /dev/null ${MIRROR[$DEFAULT]} \\\n    | egrep \"</a>\" \\\n    | egrep -o '[0-9]+\\.[0-9]*[02468]\\.[0-9]+' \\\n    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \\\n    | tail -n1\n}\n\n#\n# Display the latest lts release version.\n#\n\ndisplay_latest_lts_version() {\n  check_io_supported \"--lts\"\n  local folder_name=$($GET 2> /dev/null ${MIRROR[$DEFAULT]} \\\n    | egrep \"</a>\" \\\n    | egrep -o 'latest-[a-z]{2,}' \\\n    | sort \\\n    | tail -n1)\n\n  $GET 2> /dev/null ${MIRROR[$DEFAULT]}/$folder_name/ \\\n    | egrep \"</a>\" \\\n    | egrep -o '[0-9]+\\.[0-9]+\\.[0-9]+' \\\n    | head -n1\n}\n\n#\n# Display the versions available.\n#\n\ndisplay_remote_versions() {\n  check_current_version\n  local versions=\"\"\n  versions=$($GET 2> /dev/null ${MIRROR[$DEFAULT]} \\\n    | egrep \"</a>\" \\\n    | egrep -o '[0-9]+\\.[0-9]+\\.[0-9]+' \\\n    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \\\n    | awk '{ print \"  \" $1 }')\n\n  echo\n  local bin=${BINS[$DEFAULT]}\n  for v in $versions; do\n    if test \"$active\" = \"$bin/$v\"; then\n      printf \"  \\033[36mο\\033[0m $v \\033[0m\\n\"\n    else\n      if test -d $BASE_VERSIONS_DIR/$bin/$v; then\n        printf \"    $v \\033[0m\\n\"\n      else\n        printf \"    \\e[2m$v\\e[22m\\n\"\n      fi\n    fi\n  done\n  echo\n}\n\n#\n# Handle arguments.\n#\n\nif test $# -eq 0; then\n  test -z \"$(versions_paths)\" && err_no_installed_print_help\n  display_versions\nelse\n  while test $# -ne 0; do\n    case $1 in\n      -V|--version) display_n_version ;;\n      -h|--help|help) display_help; exit ;;\n      -q|--quiet) set_quiet ;;\n      -d|--download) ACTIVATE=false ;;\n      --latest) display_latest_version; exit ;;\n      --stable) display_latest_stable_version; exit ;;\n      --lts) display_latest_lts_version; exit ;;\n      io) set_default $1 ;; # set bin and continue\n      project) DEFAULT=2 ;;\n      -a|--arch) shift; set_arch $1;; # set arch and continue\n      bin|which) display_bin_path_for_version $2; exit ;;\n      as|use) shift; execute_with_version $@; exit ;;\n      rm|-) shift; remove_versions $@; exit ;;\n      prune) prune_versions; exit ;;\n      latest) install_latest; exit ;;\n      stable) install_stable; exit ;;\n      lts) install_lts; exit ;;\n      ls|list) display_remote_versions; exit ;;\n      *) install $1; exit ;;\n    esac\n    shift\n  done\nfi\n"}